#include <stdio.h>
#define MAX 10

typedef struct {
    int elem[MAX];
    int count;
} List;

List initialize (List L);
List insertPos (List L, int data, int position);
List deletePos(List L, int position);
int locate (List L, int data);
List insertSorted (List L, int data);
void display(List L);

int main (){
    List L = initialize(L);
    int position, data;
    //Insert
    L = insertPos (L, 10, 0);
    L = insertPos (L, 20, 1);
    L = insertPos (L, 30, 2);
    //Delete
    L = deletePos(L, 1);
    //Insert Sorted
    L = insertSorted (L, 40);
    L = insertSorted (L, 1);
    //Locate
    int location = locate(L, 10);
    //Display
    display(L);
    printf("\nLocation of 10 is %d ", location);
    printf("\nCount: %d\n", L.count);

    return 0;
}

List initialize (List L){
    L.count = 0;
    for(int i = 0; i < MAX; i++){
        L.elem[i] = -1;
    }
    return L;
}

List insertPos (List L, int data, int position){
    int i; 
    for(i = L.count; i > position; i--){
        L.elem[i] = L.elem[i - 1];
    }
    L.elem[position] = data;
    L.count++;
    return L;
}

List deletePos(List L, int position){
    int i;
    for(i = position; i < L.count-1; i++){
        L.elem[i] = L.elem[i+1];
    }
    L.elem[L.count - 1] = -1;
    L.count--;
    return L;
}

int locate (List L, int data){
    int i;
    for(i = 0; i < L.count && L.elem[i] != data; i++){}
    return i;
}

List insertSorted (List L, int data){
    int i = L.count-1;
    while(i >= 0 && L.elem[i] > data){
        L.elem[i+1] = L.elem[i];
        i--;
    }
    L.elem[i+1] = data;
    L.count++;
    return L;
}

void display(List L){
    for(int i = 0; i < MAX; i++){
        printf("%d ", L.elem[i]);
    }
}